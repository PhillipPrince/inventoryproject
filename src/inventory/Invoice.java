/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory;

import com.toedter.calendar.JCalendar;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileNotFoundException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author user
 */
public abstract class Invoice extends javax.swing.JDialog  {
    
JTable table,table2,tablec, tablecategory;
//DefaultTableModel model = null;
DefaultTableModel model;
//TableModel model;
String [][] data=null;
String [] mine=null;
String [][]purchased=null;
static String url = "jdbc:mysql://localhost:3306/inventory";
    static String username = "root";
    static String password = "this";
    String tvat="";
    String cquan2;
    String  tprice;
    String  item;
       String des;
        String quan;
        String [] cate=null;
        String coded;
        String quant;
        String vatn;
        String deb,sale;
        double due;
        String tIdno;
        double p;
    /**
     * Creates new form invoice
     */
    public Invoice(java.awt.Frame parent, boolean modal) {
       super(parent, modal);
       initComponents();
     //   data=this.getData();
        //getData();
        //testing();//
       table();
       this.setLocationRelativeTo(null);
       this.setResizable(false);
       this.setAlwaysOnTop(false);
       this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
       jLabel1.setVisible(false);
       jButton3.setEnabled(false);
       jButton1.setEnabled(false);
       // add();
       // add2();
       // total();
        invoiceno();//
        date();
        fill();
                tablecat();
                fillcat();
                
                tablecat2();
              
              //  fillcat2();
        
       // int y= data.length;
    // System.out.println(y+"is first length");
        
    }
    public void fill(){try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT name FROM customer";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
               jComboBox1.addItem(resultSet.getString(1));
             }
            conn.close();
        } catch (Exception exc) {  // process error
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        sub = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        vat = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tot = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        paid = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        ch = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        nat2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        dat = new javax.swing.JTextField();
        invoiceno = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        fcode = new javax.swing.JTextField();
        nquan = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jButton7 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        jPanel5.setBackground(new java.awt.Color(153, 153, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(900, 200));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 206, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setAutoscrolls(true);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 924, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 206, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("SUB-TOTAL:");

        sub.setText("0.00");
        sub.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("TOTAL VAT:");

        vat.setText("0.00");
        vat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("TOTAL:");

        tot.setText("0.00");
        tot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("PAID:");

        paid.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        paid.setText("0.00");
        paid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        paid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidActionPerformed(evt);
            }
        });
        paid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paidKeyReleased(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("CHANGE:");

        ch.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tot, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(60, 60, 60)
                                .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(vat, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(paid, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .addComponent(ch))
                        .addGap(30, 30, 30))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(vat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(paid, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));
        jPanel6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );

        jPanel7.setBackground(new java.awt.Color(153, 153, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("CUSTOMER :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "customer" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel9.setText("IDNO#:");

        nat2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nat2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nat2ActionPerformed(evt);
            }
        });
        nat2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nat2KeyReleased(evt);
            }
        });

        jButton4.setText("FIND");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("New Customer");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nat2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9)
                    .addComponent(nat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        dat.setBackground(new java.awt.Color(153, 153, 255));
        dat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        invoiceno.setEditable(false);
        invoiceno.setBackground(new java.awt.Color(153, 153, 255));
        invoiceno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jLabel5.setText("Invoice no:");

        jPanel8.setBackground(new java.awt.Color(153, 153, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("CODE:");

        jLabel11.setText("QUANTITY:");

        fcode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fcodeKeyReleased(evt);
            }
        });

        nquan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/inventory/tick-1.png"))); // NOI18N

        jButton3.setText("ADD ITEM");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(153, 153, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel10.setBackground(new java.awt.Color(153, 153, 255));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 184, Short.MAX_VALUE)
        );

        jPanel11.setBackground(new java.awt.Color(153, 153, 255));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 345, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel19.setText("Search");

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
             //   searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jButton1.setText("Save& Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel10.setText("PRICE:");

        jComboBox2.setEditable(true);
        jComboBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
               // jComboBox2KeyReleased(evt);
            }
        });

        jButton7.setText("DISCARD");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //jButton7ActionPerformed(evt);
            }
        });

        jButton2.setText("REMOVE ITEM");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(35, 35, 35))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(fcode, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nquan, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(fcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nquan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)))
                            .addComponent(jLabel1))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jButton2)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jButton8.setText("New Invoice");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
              //  jButton8ActionPerformed(evt);
            }
        });

        jLabel13.setText("Date:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(invoiceno, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(jButton8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dat, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(invoiceno)
                            .addComponent(dat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fcodeKeyReleased
search();        // TODO add your handling code here:
    }//GEN-LAST:event_fcodeKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
double check=Double.parseDouble(quan);
        
        double q=0;
        try{
        
         q=Double.valueOf(nquan.getText());
                
                }catch(Exception ex){
        nquan.setText("");
        
        
        }
        
        if(nquan.equals("")|| q<=0){
            nquan.setText("");
JOptionPane.showMessageDialog(null,"Quantity is Empty", "Error!", JOptionPane.ERROR_MESSAGE);
}//model.setRowCount(0);
//model.setRowCount(0);
      //model.addRow(data[0]);

        else if(q>check){
            JOptionPane.showMessageDialog(null,"Stock availble is " +check, "Error!", JOptionPane.ERROR_MESSAGE);
        nquan.requestFocus();
        
        }
        else{
     Iinvoice();  
    //  data=this.getData();
    // int y= data.length;
    // System.out.println(y+"is new length");
   //data[1][1]="tt";
   //model.fireTableDataChanged();
  //table.setModel(model);
    // tablechanged();
        insertsales();
        insertdebtors();
      //table();  
jButton1.setEnabled(true);

       fillcat2(tIdno);
               // TODO add your handling code here:



}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
if(paid.getText().equals("")){


JOptionPane.showMessageDialog(null, "Paid is empty", "ERROR", JOptionPane.ERROR_MESSAGE);

}
        try {
                calc();
                truncdetails();
                truncinvoice(); 
                insertdet();
                sold();
                invoicereport();
                
                //System.out.println("purchss");
                 invoicereport ma = new invoicereport();
                        ma.initConnection();
                        ma.showReport();
                        //this.dispose();
            } // TODO add your handling code here:{}
            catch (FileNotFoundException ex) {
                Logger.getLogger(reports.class.getName()).log(Level.SEVERE, null, ex);
            }
        
               // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void paidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidActionPerformed
paid.setText("");       // TODO add your handling code here:
    }//GEN-LAST:event_paidActionPerformed

    private void paidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paidKeyReleased
try{

double d=Double.parseDouble(tot.getText());
double p=Double.parseDouble(paid.getText());
if(d<p){
paid.setText(String.valueOf(p));

}
else if(d==p){
paid.setText(String.valueOf(p));

}
else if(p>d){
double f=p-d;
paid.setText(String.valueOf(f));


}
}catch(Exception ex){
paid.setText("");
paid.requestFocus();
}            // TODO add your handling code here:
    }//GEN-LAST:event_paidKeyReleased

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
fill2((String)jComboBox1.getSelectedItem());
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void namActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
if(nat2.getText().equals("")){
JOptionPane.showMessageDialog(null,"Empty ID field", "Error", JOptionPane.ERROR_MESSAGE);

}
else{
searchid(nat2.getText());

}// TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
/*try{
int nn=Integer.parseInt(nat2.getText());

}catch(NumberFormatException ex){
nat2.setText("");

}
        
        if(nam.getText().equals("")){
JOptionPane.showMessageDialog(null,"Empty Name field", "Error", JOptionPane.ERROR_MESSAGE);


}  
else if(phon.getText().equals("")){
JOptionPane.showMessageDialog(null,"Empty Phone field", "Error", JOptionPane.ERROR_MESSAGE);

}// TODO add your handling code here:
else if(add.getText().equals("")){
JOptionPane.showMessageDialog(null,"Empty Address field", "Error", JOptionPane.ERROR_MESSAGE);

}
else if(nat2.getText().equals("")){
JOptionPane.showMessageDialog(null,"Empty ID field", "Error", JOptionPane.ERROR_MESSAGE);

}
else{save();
fill();
searchid(nat2.getText());

nat2.setText(nat2.getText());
nat2.setText("");
nam.setText("");
add.setText("");
phon.setText("");
}*/
        upd up=new upd(new JFrame(),true);
        up.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void nat2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nat2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nat2ActionPerformed

    private void nat2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nat2KeyReleased

        
        //searchid(nat.getText());        // TODO add your handling code here:
    }//GEN-LAST:event_nat2KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 if (fcode.getText().equals("")){
        
        JOptionPane.showMessageDialog(null, "Select Item to remove", "Error!", JOptionPane.ERROR_MESSAGE);
            fcode.requestFocus();
        }
 else{
        int y = 0;
            y = JOptionPane.showConfirmDialog(null, "Do you want do delete " + coded + " from " + invoiceno.getText() +  "?", "Confirm", JOptionPane.YES_NO_CANCEL_OPTION);
            if (y == JOptionPane.YES_OPTION) {
            if(coded !=null){
            searchq2(coded);
            addition();
            delete();
            update_table();
            update();
            add();
            add2();
            total();
            intial();
            intial2();
             String inv=invoiceno.getText();
        String itemcode=fcode.getText();
                searchq2(coded);
                getamt(inv);
        getsales(inv);
            
        updatedeb(inv);
    updatesale(inv);
    updatedebt();
    updatesalet();
    updateinv();
          fillcat2(tIdno);   
            }
            }
 }
             // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
double check=Double.parseDouble(quan);
        double qy=0.0;
        try{
        
        qy=Double.valueOf(nquan.getText());
                
                }catch(Exception ex){
        nquan.setText("");
        
        
        }
        if(nquan.equals("")|| qy<=0){
        JOptionPane.showMessageDialog(null,"Quantity is Empty", "Error!", JOptionPane.ERROR_MESSAGE);
        nquan.requestFocus();
        
        
        }else if(qy>check){
            JOptionPane.showMessageDialog(null,"Stock availble is " +check, "Error!", JOptionPane.ERROR_MESSAGE);
        nquan.requestFocus();
        
        }
         else if (fcode.getText().equals("")){
        
        JOptionPane.showMessageDialog(null, "Select Item to save", "Error!", JOptionPane.ERROR_MESSAGE);
            fcode.requestFocus();
        }
        else{
        
        if(coded!=null){
        search2();
        searchq2(coded);
        addition2();
        delete();
        Iinvoice2();
        update();
        update_table();
        fcode.setText("");
        nquan.setText("");
         fillcat2(tIdno);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed
         }}
        private void paidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paidMouseClicked
paid.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_paidMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public String [][] getData(){
    
     
    String [][] sample=null;
String str="SELECT * from invoice";

		  Connection cn;
		  ResultSet rs;
		  Statement st;

		  try {
		   // Change the database name, hosty name,
		   // port and password as per MySQL installed in your PC.
		   cn=DriverManager.getConnection("jdbc:mysql://" + "localhost:3306/inventory","root","this");
		   st=cn.createStatement();

		   rs=st.executeQuery(str);
                   
                 
if(rs.next()){
rs.last();

sample=new String [rs.getRow()][6];
rs.beforeFirst();
}
int rowcount=0;

		   while(rs.next())
		   {
		    
sample[rowcount][0]=rs.getString(2);
sample[rowcount][1]=rs.getString(3);
sample[rowcount][2]=rs.getString(4);
sample[rowcount][3]=rs.getString(5);
//sample[rowcount][4]=rs.getString(6);
sample[rowcount][4]=rs.getString(8);
sample[rowcount][5]=rs.getString(7);



		    
//System.out.println(sample[1][1]);		    
                   
                  
rowcount++;
                    
		   }
                  rs.close();
                  cn.close();

		  } catch (SQLException e) {

		   //e.printStackTrace();
		  }
                  System.out.println(sample);
                  return sample;
		 }
     
     public void table(){
        
   /// table.removeAll();
    String[] headers={ "CODE", "Name","DESCRIPTION","QUANTITY","VAT AMOUNT","PRICE" };

//data[i][j]=i*j;

// make table model with this data..
//DefaultTableModel model = null;

model=new DefaultTableModel(data,headers);


// table.getModel().addTableModelListener(table);

table = new JTable();
table.setModel(model);
//table.setCellSelectionEnabled(true);
//table.setEditingRow(0);
JScrollPane scrollPane = new JScrollPane(table);
scrollPane.getViewport().setBackground(Color.white);

//table.setFillsViewportHeight(true);
jPanel5.add(scrollPane,BorderLayout.CENTER);
scrollPane.setBackground(Color.WHITE);
scrollPane.setBounds(0,0,900,200);
table.addMouseListener(new MouseAdapter() {
public void mouseClicked(MouseEvent e) {
 
   // update();
int row = table.getSelectedRow();
int col = table.getSelectedColumn();
//String tIdno=cate[row];

 coded=purchased[row][0];
 quant=purchased[row][3];
  vatn=purchased[row][4];
//edit b=new edit();
  nquan.setText(quant);
  fcode.setText(coded);
 
//b.setVisible(true);
System.out.println("row is "+row+" and " +col);
}
});

// table.getModel().addTableModelListener(this);   
     }
     
public void search(){
    jButton3.setEnabled(false);
    jLabel1.setVisible(false);
     String tcode=fcode.getText();
    try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT name,description,quantity,vat,price FROM stock where Itemcode='"+tcode+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
             
           item=resultSet.getString("name");
             des=resultSet.getString("description");
           quan=resultSet.getString("quantity");
            tprice=resultSet.getString("price");
             tvat=resultSet.getString("vat");
             jLabel1.setVisible(true);
             jButton3.setEnabled(true);
             }
            conn.close();
        } catch (Exception exc) {  // process error
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
      
     
     
     }
public void Iinvoice(){
    double cvat=Double.parseDouble(tvat);
    double total=Double.parseDouble(tprice);
    double cquan=Double.parseDouble(nquan.getText());
    double tvat=Double.parseDouble(vat.getText());
    double ftotal=total*cquan;
    double tt=Double.parseDouble(sub.getText());
    
    double newsub=tt+ftotal;
    
    String stotal=String.valueOf(ftotal);
    double fvat=ftotal*cvat;
    double vatdis=tvat+fvat;
    double distotal=vatdis+newsub;
    String svat=String.valueOf(fvat);
   vat.setText(String.valueOf(vatdis));
   sub.setText(String.valueOf(newsub));
   tot.setText((String.valueOf(distotal)));
   String sold="0";
    
 try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("INSERT INTO invoice values(?,?,?,?,?,?,?,?,?)");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
 stmt.setString(1,(invoiceno.getText()));                      
stmt.setString(2,(fcode.getText()));
stmt.setString(3,item);
stmt.setString(4,(des));
stmt.setString(7,stotal);
stmt.setString(8,svat);
stmt.setString(5,(nquan.getText()));
stmt.setString(6,(tprice));
stmt.setString(9,(sold));
searchq();
subtract();
//invoiceno.setText("");
fcode.setText("");
//item.setText("");
//quan.setText("");
//tprice.setText("");
//des.setText("");
//stmt.setString(4,(quan.getText()));//stmt.setString(8,(vat.getText()));
 int u = stmt.executeUpdate();
if(u>0){

update();
update_table();
//model.addRow(mine);
jLabel1.setVisible(false);
jButton3.setEnabled(false);
nquan.setText("");

}
 
} catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }

}
public void add(){
sub.setText("");
try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT round( sum( subtotal) , 2 )FROM invoice where invoiceno='"+invoiceno.getText()+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
            while (resultSet.next()) {
sub.setText(resultSet.getString(1));
//vat.setText(resultSet.getString(2));

}   }catch(Exception ex){
ex.printStackTrace();

}
}
public void add2(){
    vat.setText("0.00");

try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT round( sum( vat) , 2 )FROM invoice where invoiceno='"+invoiceno.getText()+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
            while (resultSet.next()) {
//sub.setText(resultSet.getString(1));
vat.setText(resultSet.getString(1));

}   }catch(Exception ex){
ex.printStackTrace();

}
}
public void total(){
    tot.setText("0.00");
try{
Double addvat=Double.parseDouble(vat.getText());
Double addsub=Double.parseDouble(sub.getText());
Double finalval=addvat+addsub;
tot.setText(String.valueOf(finalval));



}
catch(Exception ex){}



}
public void invoiceno(){

 Calendar currentDate = Calendar.getInstance();
 SimpleDateFormat formatter = new SimpleDateFormat("hmmsddMMyy");
 String dd=formatter.format(currentDate.getTime());

System.out.println(dd);
invoiceno.setText(dd);

}
public void date(){

 Calendar currentDate = Calendar.getInstance();
 SimpleDateFormat formatter = new SimpleDateFormat("dd-MMM-yyyy");
 String dd=formatter.format(currentDate.getTime());

System.out.println(dd);
dat.setText(dd);

}
  
    public void searchq(){
    try {
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT * FROM stock where Itemcode='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                cquan2=resultSet.getString("quantity");
                
               System.out.println(cquan2+"result");
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
    public void subtract(){
      double adder=Double.parseDouble(nquan.getText());
      double before=Double.parseDouble(cquan2);
      double both=before-adder;
      String finaltosave=String.valueOf(both);
      String thcode=fcode.getText();
        
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update stock set quantity='"+finaltosave+"' where Itemcode='"+thcode+"'");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
                       
int u = stmt.executeUpdate();
if(u>0){

System.out.println("done");

}
    }catch(Exception ex){ex.printStackTrace();}
    }
    
    
    public void update(){
    String tsearch=invoiceno.getText(); 
    
    try {
        
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT * FROM invoice where invoiceno='"+tsearch+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            if(resultSet.next()){
                resultSet.last();
           purchased=new String[resultSet.getRow()][6];
            resultSet.beforeFirst();}
           // int rows=0;
            int row=0;
            while (resultSet.next()) {
                //cquan=resultSet.getString("quantity");
                //mine=new String[6];
             purchased[row][0]=resultSet.getString(2);
                purchased[row][1]=resultSet.getString(3);
                purchased[row][2]=resultSet.getString(4);
                purchased[row][3]=resultSet.getString(5);
                purchased[row][4]=resultSet.getString(8);
                purchased[row][5]=resultSet.getString(7);
                row++;
               System.out.println("hit");
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    }
    public void insertsales(){
     Calendar currentdate= Calendar.getInstance();   
     SimpleDateFormat n=new SimpleDateFormat("yyyy-MM-dd");
     String ddate=n.format(currentdate.getTime());
   //String str="insert into sales values()";
     int u=this.searchsales();
     
     if(u==0){
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("INSERT INTO sales values(?,?,?,?)");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
 stmt.setString(2,(invoiceno.getText()));                      
stmt.setString(1,((String)jComboBox1.getSelectedItem()));
stmt.setString(3,ddate);
stmt.setString(4,(tot.getText()));


    int t=stmt.executeUpdate();
    }catch(Exception ex){}}
     
     
     else if(u>=1){
     
     try {
         String ss=tot.getText();
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update sales set amt='"+ss+"' where invoiceno='"+invoiceno.getText()+"' ");
            PreparedStatement stmt = conn.prepareStatement(sql);
     
     int t=stmt.executeUpdate();
     }
     catch(Exception ex){
         
         
         
     }}
    }
    public int searchsales(){
        String inv=invoiceno.getText();
   int i=0;
   ResultSet rs;
  try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
   
   String str="select * from sales where invoiceno='"+inv+"'";
   PreparedStatement stmt = conn.prepareStatement(str);
  rs=stmt.executeQuery();
  while(rs.next()){
  
  i=1;
  
  }
  }catch(Exception ex){
  
  
  } 
        
    return i;
    
    }
    public void invoicereport(){
        String inv=invoiceno.getText();
        String datq=dat.getText();
       String str="INSERT INTO invoiceholder (invoiceno,itemcode,item,description,quantity,price,subtotal,vat) select invoiceno,itemcode,item,description,quantity,price,subtotal,vat from invoice where invoiceno='" +inv + "'";
       Connection cn;
		  
		  Statement st;

		  try {
		   // Change the database name, hosty name,
		   // port and password as per MySQL installed in your PC.
		   cn=DriverManager.getConnection("jdbc:mysql://" +
		     "localhost:3306/inventory","root","this");
		   st=cn.createStatement();
int i=st.executeUpdate(str);
   
   
   st=cn.createStatement();
		   
                  }catch(Exception ex){
                  ex.printStackTrace();
                  }
   
   } 
    public void insertdet(){
        String inv=invoiceno.getText();
         String cusq=((String)jComboBox1.getSelectedItem());
    String str="INSERT INTO invoicedetails values('"+inv+"','"+cusq+"','"+paid.getText()+"','"+due+"') ";
       Connection cn;
		  
		  Statement st;

		  try {
		   // Change the database name, hosty name,
		   // port and password as per MySQL installed in your PC.
		   cn=DriverManager.getConnection("jdbc:mysql://" +
		     "localhost:3306/inventory","root","this");
		   st=cn.createStatement();
int i=st.executeUpdate(str);
   
   
   st=cn.createStatement();
		   
                  }catch(Exception ex){}
   
   
    
    
    
    }
    public void truncinvoice(){
   
   String str="truncate table invoiceholder";
   Connection cn;
		  
		  Statement st;

		  try {
		   // Change the database name, hosty name,
		   // port and password as per MySQL installed in your PC.
		   cn=DriverManager.getConnection("jdbc:mysql://" +
		     "localhost:3306/inventory","root","this");
		   st=cn.createStatement();
int i=st.executeUpdate(str);
   
   
   st=cn.createStatement();
                  }catch(Exception ex){
                  
                  
                  
                  }
   }
    public void truncdetails(){
   
   String str="truncate table invoicedetails";
   Connection cn;
		  
		  Statement st;

		  try {
		   // Change the database name, hosty name,
		   // port and password as per MySQL installed in your PC.
		   cn=DriverManager.getConnection("jdbc:mysql://" +
		     "localhost:3306/inventory","root","this");
		   st=cn.createStatement();
int i=st.executeUpdate(str);
   
   
   st=cn.createStatement();
                  }catch(Exception ex){
                  
                  
                  
                  }
   }
    public void insertdebtors(){
      Calendar currentdate= Calendar.getInstance();   
     SimpleDateFormat n=new SimpleDateFormat("yyyy-MM-dd");
     String ddate=n.format(currentdate.getTime());
   //String str="insert into sales values()";
     int u=this.searchdebtors();
     
     if(u==0){
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("INSERT INTO debtors values(?,?,?,?,?)");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
 stmt.setString(2,(invoiceno.getText()));                      
stmt.setString(1,((String)jComboBox1.getSelectedItem()));
stmt.setString(3,(paid.getText()));
stmt.setString(5,ddate);
stmt.setString(4,(tot.getText()));


    int t=stmt.executeUpdate();
    }catch(Exception ex){}
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("INSERT INTO invoicetransactions values(?,?,?,?)");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
 stmt.setString(1,(invoiceno.getText()));                      
stmt.setString(2,((String)jComboBox1.getSelectedItem()));
stmt.setString(3,(paid.getText()));
stmt.setString(4,ddate);
//stmt.setString(4,(tot.getText()));


    int t=stmt.executeUpdate();
    }catch(Exception ex){} 
     }
     
     
     else if(u>=1){
     
     try {
         String ss=tot.getText();
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update debtors set total='"+ss+"', amtpaid='"+paid.getText()+"' where invoiceno='"+invoiceno.getText()+"' ");
            PreparedStatement stmt = conn.prepareStatement(sql);
     
     int t=stmt.executeUpdate();
     }
     catch(Exception ex){
         
         
         
     }
     try {
         String ss=tot.getText();
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update invoicetransactions set amtpaid='"+paid.getText()+"' where invoiceno='"+invoiceno.getText()+"' ");
            PreparedStatement stmt = conn.prepareStatement(sql);
     
     int t=stmt.executeUpdate();
     }
     catch(Exception ex){
         
         
         
     }
     }}
    public int searchdebtors(){
        String inv=invoiceno.getText();
   int i=0;
   ResultSet rs;
  try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
   
   String str="select * from debtors where invoiceno='"+inv+"'";
   PreparedStatement stmt = conn.prepareStatement(str);
  rs=stmt.executeQuery();
  while(rs.next()){
  
  i=1;
  
  }
  }catch(Exception ex){
  
  
  } 
        
    return i;
    
    }
    public void calc(){
        double c=0;
    try{

double d=Double.parseDouble(tot.getText());
p=Double.parseDouble(paid.getText());
if(p<d){
paid.setText(String.valueOf(p));
c=0.0;
ch.setText(String.valueOf(c));}
else if(d==p){
paid.setText(String.valueOf(p));
c=0.00;
}
else if(p>d){
double f=p-d;
paid.setText(String.valueOf(d));

c=f;
ch.setText(String.valueOf(c));
}

 due=(p-d)*-1;

insertdebtors();
invoicepopup f=new invoicepopup(new javax.swing.JFrame(),true);
f.fill(String.valueOf(c));
f.setVisible(true);
//this.dispose();
}catch(Exception ex){
paid.setText("");
paid.requestFocus();
}     
    
    }
    public void searchid(String id){
        jComboBox1.setSelectedItem("customer");
    try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT name FROM customer where idno='"+id+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
               jComboBox1.setSelectedItem(resultSet.getString(1));
             }
            conn.close();
        } catch (Exception exc) {  // process error
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    }
    /*
    public void save(){
       String name=nam.getText();                      
String phone=phon.getText();
String id=nat2.getText();
String address=add.getText();
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("INSERT INTO customer(name,phoneno,idno,address) values('"+name+"','"+phone+"','"+id+"','"+address+"')");
            PreparedStatement stmt = conn.prepareStatement(sql);
           



    int t=stmt.executeUpdate();
    if(t>0){
    JOptionPane.showMessageDialog(null,"Saved", "Success", JOptionPane.INFORMATION_MESSAGE);

    
    }
    }catch(Exception ex){}
    
    
    
    }*/
    public void fill2(String name){
    try {
        nat2.setText("");
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT idno FROM customer  where name='"+name+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
            while (resultSet.next()) {
           nat2.setText(resultSet.getString(1));
             }
            conn.close();
        } catch (Exception exc) {  // process error
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
     public void tablecat(){
       final String [] category2=this.cat(); 
   /// table.removeAll();
    String[] headers={ "CODE" };
System.out.println(category2[0]+ "from within");
//data[i][j]=i*j;

// make table model with this data..
//DefaultTableModel model = null;
    String [] []category=null;

model=new DefaultTableModel(category,headers);


// table.getModel().addTableModelListener(table);

tablec = new JTable();
tablec.setModel(model);
//table.setCellSelectionEnabled(true);
//table.setEditingRow(0);
JScrollPane scrollPane = new JScrollPane(tablec);
scrollPane.getViewport().setBackground(Color.lightGray);
//tablec.setFillsViewportHeight(true);
jPanel10.add(scrollPane,BorderLayout.CENTER);
scrollPane.setBackground(Color.WHITE);
scrollPane.setBounds(0,0,127,185);
// table.getModel().addTableModelListener(this);  
tablec.addMouseListener(new MouseAdapter() {
public void mouseClicked(MouseEvent e) {
 
   // update();
int row = tablec.getSelectedRow();
int col = tablec.getSelectedColumn();
tIdno=category2[row];

//edit b=new edit();
fillcat2(tIdno);
cod(tIdno);

//b.setVisible(true);
System.out.println("row is "+row+" and " +col);
}
});
     }
     public String [] cat(){
        // String [] cate=null;
   // String tsearch=invoiceno.getText(); 
    
    try {
        
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT distinct category FROM stock";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            if(resultSet.next()){
                resultSet.last();
            mine=new String[resultSet.getRow()];
            resultSet.beforeFirst();}
           // int rows=0;
            int row=0;
            while (resultSet.next()) {
                //cquan=resultSet.getString("quantity");
               
             mine[row]=resultSet.getString(1);
                
                System.out.println("process error" + mine[row]);
               row++;
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            //System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
   
    return mine;
    
    
     }
     public void fillcat(){
      try {
        
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT distinct category as 'CATEGORY' FROM stock";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
           tablec.setModel(DbUtils.resultSetToTableModel(resultSet));
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
     
     }
     public void fillcat2(String cate){
      try {
        
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT Itemcode as 'CODE',name as 'NAME',description as 'DESCRIPTION',quantity as 'QUANTITY' FROM stock WHERE category='"+cate+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
           tablecategory.setModel(DbUtils.resultSetToTableModel(resultSet));
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
     
     }
     public void tablecat2(){
        
   /// table.removeAll();
    String[] headers={ "CODE","NAME","DESCRIPTION","QUANTITY" };

//data[i][j]=i*j;

// make table model with this data..
//DefaultTableModel model = null;
    String [][] category=null;

model=new DefaultTableModel(category,headers);


// table.getModel().addTableModelListener(table);

tablecategory = new JTable();
tablecategory.setModel(model);
//table.setCellSelectionEnabled(true);
//table.setEditingRow(0);
JScrollPane scrollPane = new JScrollPane(tablecategory);
scrollPane.getViewport().setBackground(Color.WHITE);
tablecategory.setFillsViewportHeight(true);
jPanel11.add(scrollPane,BorderLayout.CENTER);
scrollPane.setBackground(Color.WHITE);
scrollPane.setBounds(0,0,345,160);
tablecategory.addMouseListener(new MouseAdapter() {
public void mouseClicked(MouseEvent e) {
 
   // update();
int row = tablecategory.getSelectedRow();
int col = tablecategory.getSelectedColumn();
//String tIdno=cate[row];
fcode.setText(cate[row]);
//edit b=new edit();
jLabel1.setVisible(true);
       jButton3.setEnabled(true);
       search();
//b.setVisible(true);
System.out.println("row is "+row+" and " +col);
}
});
// table.getModel().addTableModelListener(this);   
     }
     public String [] cod(String catego){
         //String [] cate=null;
    String tsearch=invoiceno.getText(); 
    
    try {
        
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT Itemcode FROM stock where category='"+catego+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            if(resultSet.next()){
                resultSet.last();
            cate=new String[resultSet.getRow()];
            resultSet.beforeFirst();}
           // int rows=0;
            int row=0;
            while (resultSet.next()) {
                //cquan=resultSet.getString("quantity");
               
             cate[row]=resultSet.getString(1);
                
                
               row++;
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    return cate;
    
    
     }
     public void fillcat3(){
      try {
        
        String find=fcode.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT Itemcode FROM stock";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
           tablecategory.setModel(DbUtils.resultSetToTableModel(resultSet));
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
     
     }
     
     public void intial()
    {
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String user = "root";
            String pass = "this";
            String url = "jdbc:mysql://localhost:3306/inventory";
            String sql = "delete from debtors where not exists (select invoiceno from invoice where invoiceno=invoiceno)";
            com.mysql.jdbc.Connection conn = (com.mysql.jdbc.Connection)DriverManager.getConnection(url, user, pass);
            com.mysql.jdbc.PreparedStatement stms = (com.mysql.jdbc.PreparedStatement)conn.prepareStatement(sql);
            int s = stms.executeUpdate();
            if(s > 0)
                JOptionPane.showMessageDialog(jPanel1, "updated", "Successfull", 1);
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
    }
     public void intial2()
    {
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String user = "root";
            String pass = "this";
            String url = "jdbc:mysql://localhost:3306/inventory";
            String sql = "delete from sales where not exists (select invoiceno from invoice where invoiceno=invoiceno)";
            com.mysql.jdbc.Connection conn = (com.mysql.jdbc.Connection)DriverManager.getConnection(url, user, pass);
            com.mysql.jdbc.PreparedStatement stms = (com.mysql.jdbc.PreparedStatement)conn.prepareStatement(sql);
            int s = stms.executeUpdate();
            if(s > 0)
                JOptionPane.showMessageDialog(jPanel1, "updated", "Successfull", 1);
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
    }
     public void delete(){
     try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "DELETE FROM invoice where Itemcode='"+coded+"' && invoiceno='"+invoiceno.getText()+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            int r = stmt.executeUpdate();
            
             
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
     
     
     }
     public void update_table(){
      try {
        
        String find=invoiceno.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT Itemcode as 'CODE',item as 'Name', description as 'DESCRIPTION',quantity as 'QUANTITY',vat as 'VAT AMOUNT',price as 'PRICE' FROM invoice where invoiceno='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            
           table.setModel(DbUtils.resultSetToTableModel(resultSet));
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
     
     
     
     }
     public void searchq2(String find){
    try {
       // String find=code.getText();
        System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT * FROM stock where Itemcode='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                cquan2=resultSet.getString("quantity");
                
               System.out.println(cquan2+"result");
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
      public void addition(){
      double adder=Double.parseDouble(quant);
      double before=Double.parseDouble(cquan2);
      double both=before+adder;
      String finaltosave=String.valueOf(both);
     // String thcode=code.getText();
        
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update stock set quantity='"+finaltosave+"' where Itemcode='"+coded+"'");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
                       
int u = stmt.executeUpdate();
if(u>0){

System.out.println("done");

}
    }catch(Exception ex){ex.printStackTrace();}
    }
    public void search2(){
   //// jButton3.setEnabled(false);
  //  jLabel1.setVisible(false);
  //   String tcode=code.getText();
    try {
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT name,description,quantity,vat,price FROM stock where Itemcode='"+coded+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
             
           item=resultSet.getString("name");
             des=resultSet.getString("description");
           quan=resultSet.getString("quantity");
            tprice=resultSet.getString("price");
             tvat=resultSet.getString("vat");
             jLabel1.setVisible(true);
             jButton3.setEnabled(true);
             }
            conn.close();
        } catch (Exception exc) {  // process error
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
      
     
     
     }
    public void Iinvoice2(){
    double cvat=Double.parseDouble(tvat);
    double total=Double.parseDouble(tprice);
    double now=Double.parseDouble(quant);
    double cquan=Double.parseDouble(nquan.getText());
    double tvat=Double.parseDouble(vat.getText());
    double ftotal=total*cquan;
    double tt=Double.parseDouble(sub.getText());
    
    double newsub=tt+ftotal-(now*total);
    
    String stotal=String.valueOf(ftotal);
    double fvat=ftotal*cvat;
    double vatdis=tvat+fvat-(Double.parseDouble(vatn));
    double distotal=vatdis+newsub;
    String svat=String.valueOf(fvat);
   vat.setText(String.valueOf(vatdis));
   sub.setText(String.valueOf(newsub));
   tot.setText((String.valueOf(distotal)));
   
    
 try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("INSERT INTO invoice values(?,?,?,?,?,?,?,?,?)");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
 stmt.setString(1,(invoiceno.getText()));                      
stmt.setString(2,(fcode.getText()));
stmt.setString(3,item);
stmt.setString(4,(des));
stmt.setString(7,stotal);
stmt.setString(8,svat);
stmt.setString(5,(nquan.getText()));
stmt.setString(6,(tprice));
stmt.setString(9,String.valueOf("0"));
//searchq();
//subtract();
//invoiceno.setText("");
fcode.setText("");
//item.setText("");
//quan.setText("");
//tprice.setText("");
//des.setText("");
//stmt.setString(4,(quan.getText()));//stmt.setString(8,(vat.getText()));
 int u = stmt.executeUpdate();
if(u>0){

update();
update_table();
//model.addRow(mine);
jLabel1.setVisible(false);
jButton3.setEnabled(false);
nquan.setText("");

}
 
} catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }

}
    public void addition2(){
      double adder=Double.parseDouble(quant);
      double before=Double.parseDouble(cquan2);
      double now=Double.parseDouble(nquan.getText());
      double both=before+adder-now;
      String finaltosave=String.valueOf(both);
     // String thcode=code.getText();
        
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update stock set quantity='"+finaltosave+"' where Itemcode='"+coded+"'");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
                       
int u = stmt.executeUpdate();
if(u>0){

System.out.println("done");

}
    }catch(Exception ex){ex.printStackTrace();}
    }
    public void sold(){
      
        String d="1";
    try {
           Class.forName("com.mysql.jdbc.Driver").newInstance();
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = ("update invoice set sold='"+d+"' where invoiceno='"+invoiceno.getText()+"'");
            PreparedStatement stmt = conn.prepareStatement(sql);
           
                       
int u = stmt.executeUpdate();
if(u>0){

System.out.println("done");

}
    }catch(Exception ex){ex.printStackTrace();}
    }
    public void getamt(String find){
    
    try {
      // String find=code.getText();
        System.out.println(find +"    isssssssssssssssssssssssssssssss");
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT total FROM debtors where invoiceno='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                deb=resultSet.getString(1);
                //System.out.println(deb +"    isssssssssssssssssssssssssssssss");
              //System.out.println(deb+"result found  fffffffffffffffffffffffffffffffffff
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
    public void getsales(String find){
    
    try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT amt FROM sales where invoiceno='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
                sale=resultSet.getString(1);
                
               //System.out.println(cquan2+"result");
             }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
    public void updatedeb(String find){
    
      String paidamt=paid.getText();
    
    String finalsave=tot.getText();
    try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "update debtors set total='"+finalsave+"',amtpaid='"+paidamt+"' where invoiceno='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            int y = stmt.executeUpdate();
            if(y>0){
            JOptionPane.showMessageDialog(null, "done", "don uuuuu", JOptionPane.INFORMATION_MESSAGE);
            
            }
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    }
        public void updatesale(String find){
    
    
    
    String finalsave=tot.getText();
    try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "update sales set amt='"+finalsave+"' where invoiceno='"+find+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            int y = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    
    }
        public void updatesalet(){
    
    
  //  double finalsave=amtsold+amtcurr;
    try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "delete from debtors where total='0'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            int y = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
        public void updateinv(){
    
    
  //  double finalsave=amtsold+amtcurr;
    try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "delete from invoice where sold='0'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            int y = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    }
        public void updatedebt(){
    
    try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "delete from sales where amt<='0'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            int y = stmt.executeUpdate();
            
            conn.close();
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
        }
    
    
    
    
    
        
    }
       
        public Double frominv(String find,String code){
        double ret=0.0;
        String sub="";
        String vat="";
        try {
       // String find=code.getText();
       // System.out.println(find);
           Class.forName("com.mysql.jdbc.Driver");
             Connection conn = DriverManager.getConnection(url, username, password);
            String sql = "SELECT subtotal,vat FROM invoice where invoiceno='"+find+"'&& Itemcode='"+code+"'";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet resultSet = stmt.executeQuery();
            while (resultSet.next()) {
            sub=resultSet.getString(1);
            vat=resultSet.getString(2);
                
               ret=(Double.parseDouble(sub)+(Double.parseDouble(vat)));
             }
            conn.close();
           
        } catch (Exception exc) {  // process error
            exc.printStackTrace();
            System.out.println("process error" + exc);
                     //  JOptionPane.showMessageDialog(jPanel1,"Sorry, connection Failed!\nOpen Xampp And Set MySql Running","Error!",JOptionPane.ERROR_MESSAGE);
//System.exit(0);
            
        }
    return ret;
        }
    
public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Invoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Invoice dialog = new Invoice(new javax.swing.JFrame(), true) {

                    
                    
                   

                    
                    
                };
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ch;
    private javax.swing.JTextField dat;
    private javax.swing.JTextField fcode;
    private javax.swing.JTextField invoiceno;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nat2;
    private javax.swing.JTextField nquan;
    private javax.swing.JTextField paid;
    private javax.swing.JTextField search;
    private javax.swing.JTextField sub;
    private javax.swing.JTextField tot;
    private javax.swing.JTextField vat;
    // End of variables declaration//GEN-END:variables
}
